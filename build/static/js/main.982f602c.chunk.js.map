{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","then","response","data","saveNoteInServer","concat","notesToShow","filter","map","noteToEdit","find","noteEdited","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"gMAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCP1CK,EAAU,SAcD,EAZA,WACb,OAAOC,IAAMC,IAAIF,IAWJ,EARA,SAAAG,GACb,OAAOF,IAAMG,KAAKJ,EAASG,IAOd,EAJA,SAACE,EAAIF,GAClB,OAAOF,IAAMK,IAAN,UAAaN,EAAb,YAAwBK,GAAMF,ICRjCI,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKX,UAAU,QAAf,SACGW,KAKDC,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GAuFSC,EAlFH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAUAC,qBARa,WACXC,IAEGC,MAAK,SAAAC,GACJV,EAASU,EAASC,WAIR,IAEhB,IAWMC,EAAmB,SAACpC,GACxBgC,EACUhC,GACPiC,MAAK,SAAAC,GACJV,EAASD,EAAMc,OAAOH,EAASC,OAC/BT,EAAW,QAuBXY,EAAcX,EAChBJ,EACAA,EAAMgB,QAAO,SAAAvC,GAAI,OAAIA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcY,QAASc,IACvB,8BACE,yBAAQvB,QAAS,kBAAMsB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGW,EAAYE,KAAI,SAAAxC,GAAI,OACnB,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAkB,kBA9B/B,SAACW,GAC1B,IAAM6B,EAAalB,EAAMmB,MAAK,SAAA1C,GAAI,OAAIA,EAAKY,KAAOA,KAC5C+B,EAAU,2BAAOF,GAAP,IAAmBtC,WAAYsC,EAAWtC,YAE1D6B,EACUpB,EAAI+B,GACXV,MAAK,SAAAC,GACJV,EAASD,EAAMiB,KAAI,SAAAxC,GAAI,OAAIA,EAAKY,KAAOA,EAAKZ,EAAOkC,EAASC,YAE7DS,OAAM,SAACC,GACNf,EAAgB,SAAD,OAAUW,EAAWpC,QAArB,sCACfyC,YAAW,WAAQhB,EAAgB,QAAS,QAmBciB,CAAmB/C,EAAKY,MAArEZ,EAAKY,SAGpB,uBAAMoC,SAzDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACf9C,QAASoB,EACT2B,MAAM,IAAIC,MAAOC,cACjBnD,UAAWoD,KAAKC,SAAW,GAC3B5C,GAAIW,EAAMkC,OAAS,GAErBrB,EAAiBe,IAiDjB,UACE,uBAAOO,MAAOjC,EAASkC,SAtCJ,SAACV,GACxBvB,EAAWuB,EAAMW,OAAOF,UAsCpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MCtGNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.982f602c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'make not important' : 'make important';\n    \n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    );\n}\n\nexport default Note;","import axios from 'axios'\nconst baseUrl = '/notes'\n\nconst getAll = () => {\n  return axios.get(baseUrl);\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject);\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject);\n}\n\nexport default { getAll, create, update }\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const hook = () => {\n    noteService\n      .getAll()\n      .then(response => {\n        setNotes(response.data);\n      })\n  }\n  \n  useEffect(hook, [])\n\n  const addNote = (event) => {\n    event.preventDefault(); \n    const noteObject = {\n        content: newNote,\n        date: new Date().toISOString(),\n        important: Math.random() < 0.5,\n        id: notes.length + 1,\n      }\n      saveNoteInServer(noteObject);\n  };\n\n  const saveNoteInServer = (note) => {\n    noteService\n      .create(note)\n      .then(response => {\n        setNotes(notes.concat(response.data));\n        setNewNote('');\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportanceOf = (id) => {\n    const noteToEdit = notes.find(note => note.id === id);\n    const noteEdited = {...noteToEdit, important: !noteToEdit.important};\n\n    noteService\n      .update(id, noteEdited)\n      .then(response => {\n        setNotes(notes.map(note => note.id !== id ? note : response.data))\n      })\n      .catch((error) => {\n        setErrorMessage(`Note '${noteToEdit.content}' was already removed from server`);\n        setTimeout(() => { setErrorMessage(null) }, 5000);\n      }) \n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form> \n      <Footer />\n    </div>\n  )\n}\n\nexport default App ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}